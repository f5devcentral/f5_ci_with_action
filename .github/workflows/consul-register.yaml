# This workflow will register a new service in Consul

name: Consul Register Service

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master and dev branches
on:
  push:
    paths:
    - "declarations/consul/register/**"
    branches:
      - master
      - dev

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner (virtual machine os type) that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    

    # Display Secrets
    - name: Display secrets
      run: |
           echo " Displaying access key, ${{ secrets.AWS_ACCESS_KEY_ID }}"
           echo " Displaying secret ${{ secrets.AWS_SECRET_ACCESS_KEY }}"

    # Read the S3 bucket parameters that were created during the initial Terraform processing
    - name: Read S3 bucket parameters
      id: s3_bucket
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
        AWS_REGION: ${{ steps.s3_bucket.outputs.s3_bucket_region }}

      run: | 
         echo ::set-output name=s3_bucket_name::$(cat ./s3/s3_bucket_params.json | jq -r '.bucket.name')
         echo ::set-output name=s3_bucket_key::$(cat ./s3/s3_bucket_params.json | jq -r '.bucket.key')
         echo ::set-output name=s3_bucket_region::$(cat ./s3/s3_bucket_params.json | jq -r '.bucket.region')

   
   
    # Read the output values produced by Terraform and stored in an AWS S3 bucket
    - name: read S3 bucket
      uses: prewk/s3-cp-action@master
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
        AWS_REGION: ${{ steps.s3_bucket.outputs.s3_bucket_region }}
        SOURCE: s3://${{ steps.s3_bucket.outputs.s3_bucket_name }}/${{ steps.s3_bucket.outputs.s3_bucket_key }}
        DEST: ./s3-variables

    # display S3 cntents
    - name: Display S3 Contents
      run: cat  ./s3-variables

        


    # Install the Consul CLI for use in registering a new Consul service
    - name: Install Consul CLI & Consul Templating
      run: |
       sudo sh ./consul.sh

    # Capture the version of Consul
    - name: Check version of Consul
      id: consul
      run: |
        echo ::set-output name=console-output::$(consul version)

    # Display the version of Consul for informational purposes
    - name: Display console output
      run: echo "This is the Consul version = ${{ steps.consul.outputs.console-output }}"

    # Get the URL of the Consul server from the S3 bucket
    - name: Read Consul Host Data
      id: consul_host
      run: | 
        echo ::set-output name=consul_host::$(cat ./s3-variables | jq '.outputs.Consul_UI.value')

    # Get the list of files that were pushed during the last commit
    - name: get list of changed files
      id: files
      uses: jitterbit/get-changed-files@v1

    # Iterate over the list of changed files and only process those associated with Consul service registrations
    - name: Register Added Service Definitions
      run: |
        export CONSUL_HTTP_SSL_VERIFY=false
        for changed_file in ${{ steps.files.outputs.added_modified }}; do
        if [[ $changed_file =~  ^declarations/consul/register/.* ]]
        then
          (consul services register -http-addr=${{ steps.consul_host.outputs.consul_host }} ${changed_file})
        fi
        done

    # - name: Register Renamed Service Definitions
    #   run: |
    #     export CONSUL_HTTP_SSL_VERIFY=false
    #     for changed_file in ${{ steps.files.outputs.renamed }}; do
    #     if [[ $changed_file =~  ^declarations/consul/register/.* ]]
    #     then
    #       (consul services register -http-addr=${{ steps.consul_host.outputs.consul_host }} ${changed_file})
    #     fi
    #     done

    # Display the current list of registered services which should include any newly registered services.    
    - name: Show Registered Services
      run: |
        export CONSUL_HTTP_SSL_VERIFY=false
        (consul catalog services -http-addr=${{ steps.consul_host.outputs.consul_host }})
        
